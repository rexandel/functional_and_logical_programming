% Факты - утверждения, которые всегда истинны
% Правила - условные утверждения вида "если...то"
% Предикаты - (аналог функции из других языков)

% Программа на Prolog отвечает на вопросы (запросы), пытаясь найти решения, которые удовлетворяют заданным правилам

% :- (Левая часть истинна, если правая часть истинна)

% ------------------------------------------------------------------------------------------------------------------

% Предикат для сравнения цифр и определения правильного оператора
compare_digits(D1, D2, '<') :- D1 < D2.  % Оператор '<' корректен между D1 и D2, ЕСЛИ D1 меньше D2
compare_digits(D1, D2, '>') :- D1 > D2.  % Оператор '>' корректен между D1 и D2, ЕСЛИ D1 больше D2
compare_digits(D, D, '=') !.  % Оператор '=' корректен между одной и той же переменной

% ------------------------------------------------------------------------------------------------------------------

% Основной предикат для исправления выражения
fix_expression([D1, _, D2], [D1, Op, D2]) :-  % Результат [D1, Op, D2] корректен для входа [D1, _, D2] ЕСЛИ
    % char_code - Встроенный предикат, который преобразует символ в ACII код
	char_code(D1, Code1),  % Можно получить Code1 из D1 
    char_code(D2, Code2),  % Можно получить Code2 из D2
	% Предикат compare_digits используется для определения правильного ответа
    compare_digits(Code1, Code2, Op).  % Этот предикат является истинным

% ------------------------------------------------------------------------------------------------------------------

% Вспомогательные предикаты для работы со строками
string_to_list(String, List) :-
	% string_chars - встроенный предикат, который преобразует строку в список или список в строку
    string_chars(String, List).

list_to_string(List, String) :-
	% string_chars - встроенный предикат, который преобразует строку в список или список в строку
    string_chars(String, List).

% ------------------------------------------------------------------------------------------------------------------

% Главный предикат (интерфейс)
fix_expression_string(Input, Output) :-
    string_to_list(Input, List),
    fix_expression(List, FixedList),
    list_to_string(FixedList, Output).